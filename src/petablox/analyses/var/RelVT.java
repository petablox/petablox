package petablox.analyses.var;

import java.util.Iterator;
import java.util.List;

import petablox.program.Program;
import petablox.program.visitors.IMethodVisitor;
import petablox.project.Petablox;
import petablox.project.analyses.ProgramRel;
import petablox.util.soot.ICFG;
import petablox.util.soot.SootUtilities;
import soot.ArrayType;
import soot.Local;
import soot.RefLikeType;
import soot.RefType;
import soot.SootClass;
import soot.SootMethod;
import soot.Type;
import soot.Unit;
import soot.Value;
import soot.ValueBox;
import soot.toolkits.graph.Block;

/**
 * Relation containing each tuple (v,t) such that local variable v of reference type has type t.
 * If SSA is used (system property {@code petablox.ssa} is set to true) then it is guaranteed that
 * each local variable v has a unique type t.
 * 
 * @author Mayur Naik (mhn@cs.stanford.edu)
 */

/***
 * Note about soot port:
 * Original chord adds one extra local variable in the register factory for static methods.
 * Also, the redundant variables are not removed from the register factory when move instrructions are removed (nomovephi)
 * Therefore, in original chord, relVT has some extra entries as compared to relVT generated by the soot port
 * Example test case: pjbench-read-only/test (with my local modifications)
 */
@Petablox(
    name = "VT",
    sign = "V0,T0:T0_V0"
)
public class RelVT extends ProgramRel implements IMethodVisitor {
    private RefLikeType javaLangObject;
    public void init() {
        javaLangObject = Program.g().getClass("java.lang.Object");
        assert (javaLangObject != null);
    }
    public void visit(SootClass c) { }
    public void visit(SootMethod m) {
        if (!m.isConcrete())
            return;
        /*ICFG cfg = SootUtilities.getCFG(m);
        Local[] regs = SootUtilities.getMethArgLocals(m);
        int numArgs = regs.length;
        for(int i=0; i<numArgs; i++){
        	Type t = regs[i].getType();
        	if(t instanceof RefLikeType){
        		Local v = regs[i];
        		add(v,t);
        	}
        }
        for (Block bb : cfg.reversePostOrder()) {
        	Iterator<Unit> itr = bb.iterator();
            while(itr.hasNext()) {
            	Unit q = itr.next();
                process(q);
            }
        }*/
        Iterator<Local> itr = SootUtilities.getLocals(m).iterator();
        while(itr.hasNext()){
        	Local l = itr.next();
        	Type t = l.getType();
        	if(t instanceof RefLikeType){
        		add(l,t);
        	}
        }
    }
    private void process(Unit u) {
    	List<ValueBox> vbl = u.getUseAndDefBoxes();
    	for(ValueBox vb : vbl){
    		Value v = vb.getValue();
    		if(v instanceof Local){
    			Type t = v.getType();
    			if(t == null)
    				t = javaLangObject;
    			if(t instanceof RefLikeType){
    				add(v,t);
    			}
    		}
    	}
    }
}
